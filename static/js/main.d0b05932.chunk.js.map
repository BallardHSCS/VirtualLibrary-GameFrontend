{"version":3,"sources":["Keypress.js","App.js","reportWebVitals.js","index.js"],"names":["useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","unityContent","UnityContent","panelContents","Octokit","fetch","then","response","json","data","console","log","App","React","setOpen","currentPanel","setCurrentPanel","on","panelName","className","styles","textAlign","id","defaultValue","readOnly","inheritFontSize","toolbar","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NA+BeA,MA5Bf,SAAqBC,GAAW,MAEMC,oBAAS,GAFf,mBAEvBC,EAFuB,KAEXC,EAFW,KAI9B,SAASC,EAAT,GAA8B,EAAPC,MACTL,GACVG,GAAc,GAIlB,IAAMG,EAAY,SAAC,GAAY,EAAVD,MACPL,GACVG,GAAc,IAalB,OATAI,qBAAU,WAIR,OAHAC,OAAOC,iBAAiB,UAAWL,GACnCI,OAAOC,iBAAiB,QAASH,GAE1B,WACLE,OAAOE,oBAAoB,UAAWN,GACtCI,OAAOE,oBAAoB,QAASJ,MAErC,IACIJ,G,iBCjBHS,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACLC,gBAAiBN,EAAMO,QAAQC,WAAWH,MAC1CI,UAAWT,EAAMU,QAAQ,GACzBC,QAASX,EAAMY,QAAQ,EAAG,EAAG,QAI7BC,EAAe,IAAIC,eAAa,mBAAoB,wBAEpDC,EAAgB,GAEN,IAAIC,IAElBC,MACE,uGAECC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,EAAgBM,EAChBC,QAAQC,IAAIF,MA6DDG,MA1Df,WACkB1B,IAAhB,IADa,EAEW2B,IAAMrC,UAAS,GAF1B,mBAEAsC,GAFA,aAGyBD,IAAMrC,SAAS,IAHxC,mBAGRuC,EAHQ,KAGMC,EAHN,KAiBb,OAZmB1C,EAAY,SAE/B2B,EAAagB,GAAG,mBAAmB,SAACC,GAClCF,EAAgBE,GAChBJ,GAAQ,MASR,gCACE,qBAAKK,UAAU,eAAf,SACE,oBAAGC,OAAQ,CAAEC,UAAW,QAAxB,UACE,sBAAMF,UAAU,mBAAhB,iDAGA,sBAAMA,UAAU,mBAAhB,wCACA,sBAAMA,UAAU,mBAAhB,qEAKJ,qBAAKG,GAAG,iBAAiBH,UAAU,MAAnC,SACE,cAAC,IAAD,CAAOlB,aAAcA,MAEvB,sBAAKkB,UAAU,eAAf,UACE,oBAAIG,GAAG,yBAAP,SAEI,CACE,kBAAmB,aACnB,gBAAiB,mBACjB,iBAAkB,cAClB,aAAc,cACd,YAAa,0BACbP,KAGN,mBAAGI,UAAU,UAAb,SACE,cAAC,IAAD,CACEI,aAAcpB,EAAcY,GAC5BS,UAAU,EACVC,iBAAiB,EACjBC,SAAS,aC7ENC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d0b05932.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n// Hook\nfunction useKeyPress(targetKey) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n  // If pressed key is our target key then set to true\n  function downHandler({ key }) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n  // If released key is our target key then set to false\n  const upHandler = ({ key }) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n}\n\nexport default useKeyPress;\n","import Unity, { UnityContent } from \"react-unity-webgl\";\nimport React, { useState, useEffect } from \"react\";\nimport MUIRichTextEditor from \"mui-rte\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport useKeyPress from \"./Keypress\";\nimport { Octokit } from \"@octokit/rest\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nlet unityContent = new UnityContent(\"Build/Build.json\", \"Build/UnityLoader.js\");\n\nvar panelContents = {};\n\nvar octokit = new Octokit();\n\nfetch(\n  \"https://raw.githubusercontent.com/BallardHSCS/VirtualLibrary-AdminInterface/main/config/config.json\"\n)\n  .then((response) => response.json())\n  .then((data) => {\n    panelContents = data;\n    console.log(data);\n  });\n\nfunction App() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  var [currentPanel, setCurrentPanel] = React.useState(\"\");\n\n  const spacePress = useKeyPress(\"Space\");\n\n  unityContent.on(\"ToggleInfopanel\", (panelName) => {\n    setCurrentPanel(panelName);\n    setOpen(true);\n  });\n\n  function handleInfoPanelClose() {\n    setCurrentPanel(\"\");\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <div className=\"instructions\">\n        <p styles={{ textAlign: \"left\" }}>\n          <span className=\"instruction-item\">\n            Use the W, A, S and D keys to move.\n          </span>\n          <span className=\"instruction-item\">Hold shift to move faster!</span>\n          <span className=\"instruction-item\">\n            Press ESC twice to pause the game and click links.\n          </span>\n        </p>\n      </div>\n      <div id=\"unityContainer\" className=\"App\">\n        <Unity unityContent={unityContent} />\n      </div>\n      <div className=\"page-content\">\n        <h2 id=\"transition-modal-title\">\n          {\n            {\n              \"Makerspace-Info\": \"Makerspace\",\n              \"Printing-Info\": \"Printing Station\",\n              \"Bookshelf-Info\": \"Bookshelves\",\n              \"Games-Info\": \"Board Games\",\n              \"Film-Info\": \"BHS Digital Filmmaking\",\n            }[currentPanel]\n          }\n        </h2>\n        <p className=\"content\">\n          <MUIRichTextEditor\n            defaultValue={panelContents[currentPanel]}\n            readOnly={true}\n            inheritFontSize={true}\n            toolbar={false}\n          />\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}